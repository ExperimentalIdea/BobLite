package fr.rader.boblite.guis;

import fr.rader.boblite.Projects;
import fr.rader.boblite.listeners.selector.DeleteProjectListener;
import fr.rader.boblite.listeners.selector.NewProjectListener;
import fr.rader.boblite.listeners.selector.OpenProjectListener;

import javax.swing.*;
import java.awt.*;

public class ProjectSelector {

    private final Projects projects;

    private JDialog dialog;

    private JPanel mainPanel;
    private JList<String> projectsList;
    private JButton newProjectButton;
    private JButton openProjectButton;
    private JButton deleteProjectButton;

    private String project;

    public ProjectSelector(Projects projects) {
        // store the reference to the projects list
        this.projects = projects;

        // add the listeners to the buttons
        deleteProjectButton.addActionListener(new DeleteProjectListener(this));
        openProjectButton.addActionListener(new OpenProjectListener(this));
        newProjectButton.addActionListener(new NewProjectListener(this));

        // and we finally update the projectsList
        updateList();
    }

    public String createWindow() {
        // create the frame (it's a dialog to pause the execution until it's closed)
        dialog = new JDialog(null, "Bob Project Selector", Dialog.ModalityType.DOCUMENT_MODAL);

        // setting the size to a relatively good size
        dialog.setSize(400, 300);
        // setting the content of the dialog to the panel IJ built
        dialog.setContentPane(mainPanel);
        // center the frame on the screen
        dialog.setLocationRelativeTo(null);
        // dispose of the dialog when closing the window
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        // show the window
        dialog.setVisible(true);

        // return the selected project
        return project;
    }

    /**
     * Update the projects list
     */
    public void updateList() {
        projectsList.setListData(projects.getProjectsNames().toArray(new String[0]));
    }

    /**
     * Set the current project
     *
     * @param project current project
     */
    public void setProject(String project) {
        this.project = project;
    }

    /**
     * Allows parts of the code to get the JDialog
     *
     * @return the current JDialog
     */
    public JDialog getDialog() {
        return dialog;
    }

    /**
     * Allows parts of the code to have access to the Projects class
     *
     * @return the Projects class
     */
    public Projects getProjects() {
        return projects;
    }

    /**
     * Allows parts of the code to get the projects list
     *
     * @return the projects list
     */
    public JList<String> getProjectsList() {
        return projectsList;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        projectsList = new JList();
        mainPanel.add(projectsList, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        newProjectButton = new JButton();
        newProjectButton.setText("New Project");
        mainPanel.add(newProjectButton, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openProjectButton = new JButton();
        openProjectButton.setText("Open Project");
        mainPanel.add(openProjectButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteProjectButton = new JButton();
        deleteProjectButton.setText("Delete Project");
        mainPanel.add(deleteProjectButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
